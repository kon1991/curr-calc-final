{"version":3,"sources":["AddConversionForm.js","EditConversionForm.js","DeleteConversionForm.js","App.js","serviceWorker.js","index.js"],"names":["AddConversionForm","props","state","convertFrom","convertTo","rate","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","onAdd","className","onSubmit","type","onChange","Component","EditConversionForm","id","handleConversionChange","conversion","split","undefined","onEdit","fromValue","options","DeleteConversionForm","onDelete","App","toValue","amount","convertedAmount","showFormAdd","showFormEdit","showFormDelete","nextConversionId","showHint","conversions","nextConversionToId","conversionTo","nextConversionToid","handleAmountChange","handleInputChange","handleConvert","handleAdd","handleEdit","handleDelete","handleClick","input","fetch","method","body","JSON","stringify","mode","headers","then","res","ok","Error","response","json","data","console","log","catch","i","length","j","newConversion","convertFromFound","convertFromIdx","convertToFound","slice","prevState","newConversionTo","newConversionsTo","newConversions","editedConversion","conversionsTo","deletedConversion","splice","z","newNextConversionId","fromOptions","map","currency","key","conversionOptions","toOptions","editOptions","conversionToOptions","conversionFromName","conversionToName","conversionRate","push","from","to","selected","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98d7468d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass AddConversionForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //initializes the state which holds the form inputs\r\n        this.state = {\r\n            convertFrom: '',\r\n            convertTo: '',\r\n            rate: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n\r\n    \r\n\r\n    handleSubmit(event) {\r\n        //handle the submit, preventing default behavior, then calling the onAdd handler from app.js\r\n        //using the spread operator on the state as the arguments\r\n        event.preventDefault();\r\n        this.props.onAdd({...this.state});\r\n        //resets the state after submitting\r\n        this.setState({\r\n            convertFrom: '',\r\n            convertTo: '',\r\n            rate: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" onSubmit={this.handleSubmit}>\r\n                <h2>Add New Conversion</h2>\r\n                <form>\r\n                    <section className=\"options\">\r\n                        <label>From:\r\n                            <input type=\"text\" name=\"convertFrom\" value={this.state.convertFrom} onChange={this.handleChange}></input>\r\n                        </label>\r\n                        <label>To:\r\n                            <input type=\"text\" name=\"convertTo\" value={this.state.convertTo} onChange={this.handleChange}></input>\r\n                        </label>\r\n                    </section>\r\n                    <label>Rate:\r\n                        <input type=\"text\" name=\"rate\" value={this.state.rate} onChange={this.handleChange}></input>\r\n                    </label>\r\n                    \r\n                    \r\n                    <button type=\"submit\" value=\"Add\">Add</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddConversionForm;","import React, {Component} from 'react';\r\n\r\nclass EditConversionForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            convertFrom: '',\r\n            convertTo: '',\r\n            rate: ''\r\n        }\r\n        this.handleConversionChange = this.handleConversionChange.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleConversionChange(event) {\r\n        //splits the value of the option selected to set the states\r\n        const conversion = event.target.value.split(',');\r\n        this.setState({\r\n            id: conversion[0],\r\n            convertFrom: conversion[1],\r\n            convertTo: conversion[2],\r\n            rate: conversion[3]\r\n        })\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n\r\n    \r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(this.state.convertFrom!==undefined) {\r\n            this.props.onEdit({...this.state});\r\n            this.setState({\r\n                convertFrom: '',\r\n                convertTo: '',\r\n                rate: '',\r\n                id: ''\r\n            });                                                                             \r\n\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" onSubmit={this.handleSubmit}>\r\n                <h2>Edit Conversion</h2>\r\n                <form>\r\n                    <section className=\"options\">\r\n                    <label>Conversion:\r\n                        <select name=\"conversions\" value={this.state.fromValue} onChange={this.handleConversionChange}>\r\n                            {this.props.options}\r\n                        </select>\r\n                    </label>\r\n                    </section>\r\n                    <label>Rate:\r\n                        <input name=\"rate\" type=\"text\" value={this.state.rate} onChange={this.handleChange}></input>\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\"></input>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditConversionForm;","import React, {Component} from 'react';\r\n\r\nclass DeleteConversionForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            convertFrom: '',\r\n            convertTo: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleConversionChange = this.handleConversionChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n\r\n    handleConversionChange(event) {\r\n        //splits the value of the option selected to set the state\r\n        const conversion = event.target.value.split(',');\r\n        this.setState({\r\n            id: conversion[0],\r\n            convertFrom: conversion[1],\r\n            convertTo: conversion[2]\r\n        })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n         //handle the submit, preventing default behavior, then calling the onDelete handler from app.js\r\n        //using the spread operator on the state as the arguments\r\n        event.preventDefault();\r\n        this.props.onDelete({...this.state});\r\n        //resets the state\r\n        this.setState({\r\n            id: '',\r\n            convertFrom: '',\r\n            convertTo: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" onSubmit={this.handleSubmit}>\r\n                <h2>Delete Conversion</h2>\r\n                <form>\r\n                    <section className=\"options\">\r\n                    <label>From:\r\n                        <select name=\"conversions\" value={this.state.fromValue} onChange={this.handleConversionChange}>\r\n                            {this.props.options}\r\n                        </select>\r\n                    </label>\r\n                    </section>\r\n                    <input value=\"Delete\" type=\"submit\"></input>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeleteConversionForm;","import React, {Component} from 'react';\nimport './App.css';\nimport AddConversionForm from './AddConversionForm';\nimport EditConversionForm from './EditConversionForm';\nimport DeleteConversionForm from './DeleteConversionForm';\n\nconst URL = 'http://localhost:80/curr-calc-final/public/action.php';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    /*initialize the state which keeps track of:\n    Which currency you are exchanging to which, the amount and the converted amount.\n    also holds the conversions array which keeps track of all currencies and the available exchanges.\n    exchanges are not duplex since the exercise only mentioned one way exchanges.\n    */\n    this.state = {\n      fromValue: \"Euro\",\n      toValue: \"US Dollar\",\n      rate: '1.3764',\n      amount: '',\n      convertedAmount: '',\n      showFormAdd: false,\n      showFormEdit: false,\n      showFormDelete: false,\n      nextConversionId: 2,\n      showHint: false,\n      conversions: [\n        {\n          id:0,\n          name: \"Euro\",\n          nextConversionToId: 2,\n          conversionTo:[\n            {\n              id: 0,\n              name: \"US Dollar\",\n              rate: 1.3764\n            },\n            {\n              id: 1,\n              name: \"British Pound\",\n              rate: 0.8731\n            }\n          ]\n        },\n        {\n          id:1,\n          name: \"US Dollar\",\n          nextConversionToid: 1,\n          conversionTo: [\n            {\n              id: 0,\n              name: \"JPY\",\n              rate: 76.7200\n            }\n          ]\n        }\n      ]\n    }\n    //binding the context of the handlers\n    this.handleAmountChange = this.handleAmountChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleConvert = this.handleConvert.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  } \n  \n\n  handleClick(event) {\n    const target = event.target;\n    const value = target.value;\n    if(value===\"Add\"){\n      this.setState({showFormAdd: true, showFormDelete: false, showFormEdit: false});\n    }\n    if(value===\"Edit\"){\n      this.setState({showFormAdd: false, showFormDelete: false, showFormEdit: true});\n    }\n    if(value===\"Delete\"){\n      this.setState({showFormAdd: false, showFormDelete: true, showFormEdit: false});\n    }\n  }\n  validateInput(input) {\n    //fetch request to PHP script which validates the input\n    //and removes special characters and whitespace to prevent cross-site scripting\n    //for this to work you need a php server running at localhost:80 since I couldn't find a free host for react and php\n    fetch(URL,{\n      method:\"POST\",\n      body: JSON.stringify(input),\n      mode: 'cors',\n      headers: {'content-type': 'application/json'}\n    }).then(function(res) {\n      if(!res.ok){\n        throw Error(\"can't connect to server\");\n      }\n      return res;\n    }).then(response => response.json()).then(data => console.log(data)).catch(Error=> console.log(+Error));\n  }\n\n  handleConvert(event) {\n\n    //Performs the currency exchange simply by getting the relevant info from state\n    event.preventDefault();\n    const amount = this.state.amount;\n    const rate = this.state.rate;\n    this.setState({convertedAmount: amount * rate});\n  }\n\n  handleAmountChange(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n \n  handleInputChange(event) {\n  //handleChange when changing from currency to set to curr and rate\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n\n    // checks to see if its the currency to convert or the one to convert and \n    //sets the options in the select element as well as the rate of the conversion\n    if(name === \"fromValue\"){\n      for(let i=0; i<this.state.conversions.length; i++) {\n        if(this.state.conversions[i].name === value){\n          const fromValue = value;\n          const toValue = this.state.conversions[i].conversionTo[0].name;\n          const rate = this.state.conversions[i].conversionTo[0].rate;\n          this.setState({fromValue: fromValue, toValue: toValue, rate: rate});\n          break;\n        }\n      }\n    }\n    else if(name === \"toValue\") {\n      const fromValue = this.state.fromValue;\n      for(let i=0; i<this.state.conversions.length; i++) {\n        if(this.state.conversions[i].name === fromValue){\n          for(let j=0; j<this.state.conversions[i].conversionTo.length; j++){\n            if(this.state.conversions[i].conversionTo[j].name === value) {\n              const toValue = value;\n              const rate = this.state.conversions[i].conversionTo[j].rate;\n              this.setState({toValue: toValue, rate: rate});\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n  handleAdd(newConversion) {\n    //spreads the newConversion object into the values we need\n    const {convertFrom, convertTo, rate} = newConversion;\n    //initialize variables to check whether the conversion exists, or at least if the from value does\n    let convertFromFound = false;\n    let convertFromIdx = null;\n    let convertToFound = false;\n    //create copy of state\n    const conversions = this.state.conversions.slice();\n    //loop through the conversion array to find if the conversion from {convertFrom} to {convertTo} exists and the index\n    //in the conversion array\n    for(let i=0; i<conversions.length; i++){\n      if(conversions[i].name === newConversion.convertFrom){\n          convertFromFound = true;\n          convertFromIdx = i;\n          const conversionTo = this.state.conversions[i].conversionTo;\n          for(let j=0; j<conversionTo.length; j++){\n            if(conversionTo[j].name === newConversion.convertTo){\n              convertToFound = true;\n              break;\n            }\n          }\n      }\n    }\n    //check whether the conversion exists\n    if(convertFromFound && convertToFound) {\n      console.log(\"This conversion already exists!\");\n    }\n    //if only the {convertFrom} exists, creates a new conversionTo object, appends it to the conversionTo array \n    // and then rebuilds the state object and sets it\n    else if(convertFromFound) {\n      this.setState((prevState)=> {\n        const newConversionTo = {name: convertTo, rate: rate, id:this.state.conversions[convertFromIdx].nextConversionToId, nextConversionToId: this.state.conversions[convertFromIdx].nextConversionToId+1};\n        const newConversionsTo = [...this.state.conversions[convertFromIdx].conversionTo, newConversionTo];\n        const newConversion = {name: convertFrom, conversionTo: newConversionsTo, id:this.state.conversions[convertFromIdx].id, nextConversionId: this.state.nextConversionId};\n        const newConversions = this.state.conversions.slice();\n        newConversions[convertFromIdx] = newConversion;\n        return {\n          conversions: newConversions\n        }\n      });\n    }\n    //if neither of the values exists create new conversionTo object, push into a new conversionTo array\n    //append it to the conversions array, increments the nextConversionIndex and sets the state\n    else {\n      const newConversionTo = {name:convertTo, rate: rate, id:0};\n      const newConversionsTo = [newConversionTo];\n      const newConversion = {name: convertFrom, conversionTo: newConversionsTo, nextConversionToId:1, id: this.state.nextConversionId};\n      const newConversions = [...this.state.conversions, newConversion];\n      this.setState((prevState)=> {\n        return {\n          conversions: newConversions,\n          nextConversionId: prevState.nextConversionId + 1,\n        }\n      });\n    }\n  }\n\n  handleEdit(editedConversion) {\n    //spread the edited conversion into the need values and create a copy of the state\n    const {id, convertFrom, convertTo, rate} = editedConversion;\n    const conversions = this.state.conversions.slice();\n    //loop through the conversion array, finds the conversion to be edited, and then builds the new state object by\n    //inserting the edited conversion into the originals place\n    for(let i=0; i<conversions.length; i++){\n      if(conversions[i].name === convertFrom){\n        const conversionsTo = this.state.conversions[i].conversionTo.slice();\n        for(let j=0; j<conversionsTo.length; j++) {\n          if(conversionsTo[j].name === convertTo){\n            let newConversionsTo = conversionsTo.slice();\n            newConversionsTo[j] = {id: id, name: convertTo, rate: rate};\n            let newConversion = conversions[i];\n            newConversion.conversionTo = newConversionsTo;\n            let newConversions = conversions.slice();\n            newConversions[i] = newConversion;\n            this.setState({conversions: newConversions});\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  handleDelete(deletedConversion) {\n    //spreads the needed values from the deletedConversionObject\n    const {id, convertFrom, convertTo} = deletedConversion;\n    let conversions = this.state.conversions.slice();\n    //loops through conversions until it finds the one to be removed. If it's the only conversion from that particular \n    //currency then it deletes the whole conversion, then deincrements the id of every conversion after it\n    for(let i=0; i<conversions.length; i++){\n      if(conversions[i].name === convertFrom){\n        let conversionsTo = this.state.conversions[i].conversionTo.slice();\n        if(conversionsTo.length === 1){\n          let newConversions = conversions.slice();\n          newConversions.splice(i,1);\n          for(let z=i; z<newConversions.length; z++){\n            newConversions[z].id--;\n          }\n          let newNextConversionId = this.state.nextConversionId - 1;\n          this.setState({conversions: newConversions, nextConversionId: newNextConversionId});\n          break;\n        }\n        //if other conversions exists from the selected currency then, only remove that conversionTo from the array\n        //and deincrements the ids of the other ones.\n        else{\n          for(let j=0; j<conversionsTo.length; j++) {\n            if(conversionsTo[j].name === convertTo){\n              let newConversionsTo = conversionsTo.slice();\n              newConversionsTo.splice(j,1);\n              for(let z=j; z<newConversionsTo.length; z++){\n                newConversionsTo[z].id--;\n              }\n              let newConversion = conversions[i];\n              newConversion.conversionTo = newConversionsTo;\n              newConversion.nextConversionToId--;\n              let newConversions = conversions.slice();\n              newConversions[i] = newConversion;\n              this.setState({conversions: newConversions});\n              break;\n            }\n          }\n        }\n        \n        break;\n      }\n    }\n      /*\n    escapeHtml(str){\n      var map =\n      {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n      return str.replace(/[&<>\"']/g, function(m) {return map[m];});\n    }*/\n  }\n\n\n  render() {\n    //maps the available conversions from to options\n    const fromOptions = this.state.conversions.map((currency, i)=>\n      <option key={currency.id} id={currency.id} value={currency.name}>{currency.name}</option>\n    );\n    //depending on the fromValue chosen get the conversions\n    let conversionOptions = this.state.conversions.slice();\n    let newConversions = [];\n    for(let i=0; i<conversionOptions.length; i++) {\n      if(conversionOptions[i].name === this.state.fromValue){\n        newConversions = conversionOptions[i].conversionTo.slice();\n        break;\n        \n      }\n    }\n    //then map them to options\n    const toOptions = newConversions.map((currency, i)=>\n          <option key={currency.id} id={currency.id} value={currency.name}>{currency.name}</option>\n        )\n\n    //builds the options to edit and delete conversions buy iterating through the conversions array and each conversionsTO\n    //array within\n    let editOptions = [];\n    let key = 0;\n    for(let i=0; i<conversionOptions.length; i++) {\n      let conversionToOptions = this.state.conversions[i].conversionTo.slice();\n      let conversionFromName = this.state.conversions[i].name;\n      for(let j=0; j<conversionToOptions.length; j++) {\n        let conversionToName = conversionToOptions[j].name;\n        let conversionRate = conversionToOptions[j].rate;\n        //builds the string containing the conversions\n        let name = `${conversionFromName} TO ${conversionToName}`\n        let id = conversionToOptions[j].id;\n        //builds the option for the select passing as its value a concatenated string containg the id,name and rate\n        //seperated by commas to use in the edit/delete form\n        editOptions.push(<option key={key} id={id} from={conversionFromName} to={conversionToName} value={`${id},${conversionFromName},${conversionToName},${conversionRate}`}>{name}</option>)\n        key++;\n      }\n    }\n    //pushes a final default option to the array\n    editOptions.push(<option key={key} value=\"\" selected>Select Conversion</option>)\n\n\n    return(\n      <div className=\"App\">\n        <button\n            type=\"button\"\n            onClick={this.handleClick}\n            value=\"Add\"\n          >\n            Add Conversion\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.handleClick}\n            value=\"Edit\"\n          >\n            Edit Conversion\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.handleClick}\n            value=\"Delete\"\n          >\n            Delete Conversion\n          </button>\n        <div className=\"container\">\n          <h2>Currency Calculator</h2>\n          <form onSubmit={this.handleConvert}>\n            <section className=\"options\">\n            <label>From:\n              <select name=\"fromValue\" value={this.state.fromValue} onChange={this.handleInputChange}>\n                {fromOptions}\n              </select>\n            </label>\n            <label>To:\n              <select name=\"toValue\" value={this.state.toValue} onChange={this.handleInputChange}>\n                {toOptions}\n              </select>\n            </label>\n            </section>\n            <input type=\"number\" name=\"amount\" value={this.state.value} onChange={this.handleAmountChange}/>\n            <button type=\"submit\" value=\"Convert\">Convert</button>\n          </form>\n          <h1 className=\"converted\">{this.state.convertedAmount}</h1>\n        </div>\n        {this.state.showFormAdd ?\n            <AddConversionForm onAdd={this.handleAdd}/> :\n            null }\n        {this.state.showFormEdit ?\n            <EditConversionForm onEdit={this.handleEdit} options={editOptions}/> :\n            null }\n\n        {this.state.showFormDelete ?\n            <DeleteConversionForm onDelete={this.handleDelete} options={editOptions}/> :\n            null }\n      </div>\n    );\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}